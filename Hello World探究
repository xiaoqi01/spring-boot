源码初探
1 父项目
<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
  
  父项目的父项目
  <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>2.1.1.RELEASE</version>
        <relativePath>../../spring-boot-dependencies</relativePath>
    </parent>
    
    此父项目管理spring-boot项目中的所依赖的所有的版本，可以叫做版本中的仲裁中心，之后导入的项目不需要版本号，使用默认版本号。
    
    2 启动器
  <dependency>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-web</artifactId>  
  </dependency>  
  spring-boot-starter : spring boot场景启动器；帮助导入web模块正常运行所依赖的组件；
  Spring Boot将所有的功能场景抽取出来，做成一个个的starter(启动器)，只需要在项目中引入这些starter，那么相关的场景的所有依赖都会导入进项目中。要用什么功能就导入什么场景的启动器。
3、主程序类（主入口类）
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
/**
*@SpringBootApplication标注这是一个spring-boot主程序类，这是一个spring-boot应用
*/
@SpringBootApplication
public class SpringBootHelloworldApplication {

	public static void main(String[] args) {
		//启动spring-boot
		SpringApplication.run(SpringBootHelloworldApplication.class, args);
	}
}

3.1、@SpringBootApplication
Spring Boot应用标注在某个类上，说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用。
注解定义如下
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(
    excludeFilters = {@Filter(
    type = FilterType.CUSTOM,
    classes = {TypeExcludeFilter.class}
), @Filter(
    type = FilterType.CUSTOM,
    classes = {AutoConfigurationExcludeFilter.class}
)}
)
public @interface SpringBootApplication {
    @AliasFor(
        annotation = EnableAutoConfiguration.class
    )
    Class<?>[] exclude() default {};

    @AliasFor(
        annotation = EnableAutoConfiguration.class
    )
    String[] excludeName() default {};

    @AliasFor(
        annotation = ComponentScan.class,
        attribute = "basePackages"
    )
    String[] scanBasePackages() default {};

    @AliasFor(
        annotation = ComponentScan.class,
        attribute = "basePackageClasses"
    )
    Class<?>[] scanBasePackageClasses() default {};
}
3.2、@SpringBootConfiguration:
Spring Boot的配置类  
标注在某个类上，表示这是一个Spring Boot的配置类
注解定义如下：
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Configuration
public @interface SpringBootConfiguration {
}
3.3、@Configuration:
Spring的配置类

标注该注解，对应Spring应用中的配置文件，其底层就是也就是容器中的一个组件 @Component。注解定义如下：

注解定义如下：
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Component
public @interface Configuration 
3.4、@EnableAutoConfiguration:
开启自动配置功能

以前使用Spring需要配置的信息，Spring Boot帮助自动配置；

@EnableAutoConfiguration通知SpringBoot开启自动配置功能，这样自动配置才能生效。

注解定义如下：
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@AutoConfigurationPackage
@Import({AutoConfigurationImportSelector.class})
public @interface EnableAutoConfiguration {
    String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";

    Class<?>[] exclude() default {};

    String[] excludeName() default {};
}
3.5、@AutoConfigurationPackage:**
自动配置包注解
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@Import({Registrar.class})
public @interface AutoConfigurationPackage {
}
3.6、@Import:
Spring底层注解

给容器中导入组件，组件由 @Import 的value值指定；

@Import(AutoConfigurationPackages.Registrar.class)：默认将主配置类(@SpringBootApplication)所在的包及其子包里面的所有组件扫描到Spring容器中。
 @Order(Ordered.HIGHEST_PRECEDENCE)  
 static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports {  
 
   @Override  
   public void registerBeanDefinitions(AnnotationMetadata metadata,  
           BeanDefinitionRegistry registry) {  
         //默认将会扫描@SpringBootApplication标注的主配置类所在的包及其子包下所有组件  
       register(registry, new PackageImport(metadata).getPackageName());  
   }  

  @Override  
  public Set<Object> determineImports(AnnotationMetadata metadata) {  
      return Collections.<Object>singleton(new PackageImport(metadata));  
  }  
}
@Import(EnableAutoConfigurationImportSelector.class): 给容器中导入组件

EnableAutoConfigurationImportSelector： 导入哪些组件的选择器，将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中。
//EnableAutoConfigurationImportSelector的父类：AutoConfigurationImportSelector  
@Override  
public String[] selectImports(AnnotationMetadata annotationMetadata) {  
    if (!isEnabled(annotationMetadata)) {  
        return NO_IMPORTS;  
    }  
    try {  
        AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader  
            .loadMetadata(this.beanClassLoader);  
        AnnotationAttributes attributes = getAttributes(annotationMetadata);  
        List<String> configurations = getCandidateConfigurations(annotationMetadata,  
                                                                 attributes);  
        configurations = removeDuplicates(configurations);  
        configurations = sort(configurations, autoConfigurationMetadata);  
        Set<String> exclusions = getExclusions(annotationMetadata, attributes);  
        checkExcludedClasses(configurations, exclusions);  
        configurations.removeAll(exclusions);  
        configurations = filter(configurations, autoConfigurationMetadata);  
        fireAutoConfigurationImportEvents(configurations, exclusions);  
        return configurations.toArray(new String[configurations.size()]);  
    }  
    catch (IOException ex) {  
        throw new IllegalStateException(ex);  
    }  
} 

其中List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);会给容器中注入众多的自动配置类（xxxAutoConfiguration），就是给容器中导入这个场景需要的所有组件，并配置好这些组件。


有了自动配置类，免去了手动编写配置类注入功能组件等繁琐的工作。

protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,  
            AnnotationAttributes attributes) {  
    List<String> configurations = SpringFactoriesLoader.loadFactoryNames(  
        getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());  
    //...  
    return configurations;  
}  
public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";  


public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {  
    String factoryClassName = factoryClass.getName();  
    try {  
        //从类路径的META-INF/spring.factories中加载所有默认的自动配置类  
        Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :  
                                 ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));  
        List<String> result = new ArrayList<String>();  
        while (urls.hasMoreElements()) {  
            URL url = urls.nextElement();  
            Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));  
            //获取EnableAutoConfiguration指定的所有值  
            String factoryClassNames = properties.getProperty(factoryClassName);  
            result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));  
        }  
        return result;  
    }  
    catch (IOException ex) {  
        throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +  
                                           "] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex);  
    }  
} 
